From fingerle at mail.berlios.de  Wed Sep  3 23:43:09 2008
From: fingerle at mail.berlios.de (fingerle at BerliOS)
Date: Wed, 3 Sep 2008 23:43:09 +0200
Subject: [fellowiki-svncheckins] r38 - / trunk
Message-ID: <200809032143.m83Lh9x8028589@sheep.berlios.de>

Author: fingerle
Date: 2008-09-03 23:43:05 +0200 (Wed, 03 Sep 2008)
New Revision: 38

Removed:
   pjm/
   trunk/README.txt
   trunk/dev.cfg
   trunk/fellowiki.py
   trunk/fellowiki/
   trunk/sample-prod.cfg
   trunk/setup.cfg
   trunk/setup.py
Log:
starting over - removing failed attempt


Deleted: trunk/README.txt
===================================================================
--- trunk/README.txt	2006-11-22 02:55:51 UTC (rev 37)
+++ trunk/README.txt	2008-09-03 21:43:05 UTC (rev 38)
@@ -1,4 +0,0 @@
-FelloWiki
-
-This is a TurboGears (http://www.turbogears.org) project. It can be
-started by running the fellowiki.py script.

Deleted: trunk/dev.cfg
===================================================================
--- trunk/dev.cfg	2006-11-22 02:55:51 UTC (rev 37)
+++ trunk/dev.cfg	2008-09-03 21:43:05 UTC (rev 38)
@@ -1,61 +0,0 @@
-[global]
-# This is where all of your settings go for your development environment
-# Settings that are the same for both development and production
-# (such as template engine, encodings, etc.) all go in 
-# fellowiki/config/app.cfg
-
-# DATABASE
-
-# driver://username:password at host:port/database
-
-# pick the form for your database
-# sqlalchemy.dburi="postgres://username at hostname/databasename"
-# sqlalchemy.dburi="mysql://username:password at hostname:port/databasename"
-# sqlalchemy.dburi="sqlite://%(current_dir_uri)s/devdata.sqlite"
-
-# If you have sqlite, here's a simple default to get you started
-# in development
-sqlalchemy.dburi="sqlite:///devdata.sqlite"
-
-# set to 1 to make SQLAlchemy echo SQL commands on the console
-sqlalchemy.echo = 0
-
-# SERVER
-
-# Some server parameters that you may want to tweak
-# server.socket_port=8080
-
-# Enable the debug output at the end on pages.
-# log_debug_info_filter.on = False
-
-server.environment="development"
-autoreload.package="fellowiki"
-
-# session_filter.on = True
-
-# Set to True if you'd like to abort execution if a controller gets an
-# unexpected parameter. False by default
-tg.strict_parameters = True
-
-# LOGGING
-# Logging configuration generally follows the style of the standard
-# Python logging module configuration. Note that when specifying
-# log format messages, you need to use *() for formatting variables.
-# Deployment independent log configuration is in fellowiki/config/log.cfg
-[logging]
-
-[[loggers]]
-[[[fellowiki]]]
-level='DEBUG'
-qualname='fellowiki'
-handlers=['debug_out']
-
-[[[allinfo]]]
-level='INFO'
-handlers=['debug_out']
-
-[[[access]]]
-level='INFO'
-qualname='turbogears.access'
-handlers=['access_out']
-propagate=0

Deleted: trunk/fellowiki.py
===================================================================
--- trunk/fellowiki.py	2006-11-22 02:55:51 UTC (rev 37)
+++ trunk/fellowiki.py	2008-09-03 21:43:05 UTC (rev 38)
@@ -1,125 +0,0 @@
-#!/usr/bin/python2.4
-# Copyright (c) 2006 Jan Niklas Fingerle
-#
-# This source code file is based on a TurboGears "quickstarted" project.
-# The TurboGears framework is copyrighted (c) 2005, 2006 by Kevin Dangoor 
-# and contributors.
-# 
-# Permission is hereby granted, free of charge, to any person obtaining a
-# copy of this software and associated documentation files (the "Software"),
-# to deal in the Software without restriction, including without limitation
-# the rights to use, copy, modify, merge, publish, distribute, sublicense,
-# and/or sell copies of the Software, and to permit persons to whom the
-# Software is furnished to do so, subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in
-# all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
-# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-# DEALINGS IN THE SOFTWARE.
-
-import pkg_resources
-pkg_resources.require("TurboGears")
-
-from optparse import OptionParser
-from os.path import join, exists, dirname
-
-import cherrypy
-import turbogears
-from turbogears.database import session
-from sqlalchemy.exceptions import SQLError
-
-from fellowiki.model import DBVersion, initialize
-
-def get_configuration():
-    parser = OptionParser()
-    parser.add_option("-c", "--config", dest="config_file", type='string',
-                  help="read configuration from FILE", metavar="FILE")
-    parser.add_option("-u", "--database ", dest="db_uri", type='string',
-                  help="data base URI", metavar="URI")
-    parser.add_option("-b", "--bind", dest="server_host", type='string',
-                  help="bind server to HOST", metavar="HOST")
-    parser.add_option("-p", "--port", dest="server_port", type='int',
-                  help="bind server to PORT", metavar="PORT")
-    parser.add_option("--generate-tables", dest="generate_tables", 
-                  action='store_true', default=False,
-                  help="generate fellowiki data base tables")
-    parser.add_option("--update-tables", dest="update_tables", 
-                  action='store_true', default=False,
-                  help="update fellowiki data base tables - not yet supported")
-                  
-    (options, args) = parser.parse_args()
-    
-    if len(args) <> 0:
-        parser.error("positional parameters supplied, but not expected")
-                      
-    return options
-
-
-def check_database(options):
-    cherrypy.log('DB URI is %s' % cherrypy.config.get('sqlalchemy.dburi'), 'DB', 0)
-    if cherrypy.config.get('sqlalchemy.dburi') in ['sqlite://', 'sqlite://:memory:', 
-                                         'sqlite:///', 'sqlite:///:memory:']:
-        # SQLite data bases require one DBApi per Thread. Cherrypy is 
-        # multithreaded. Each thread will get its own *empty* memory DB, which
-        # is not what we want, therefore...
-        cherrypy.log("FelloWiki does not support SQLite memory data bases.", 'DB', 2)
-        return False
-    
-    try: 
-        versions = DBVersion.select()
-        if options.generate_tables:
-            cherrypy.log('generation of data base tables requested, but '+
-                         'schema version table exists', 'DB', 1)
-            return True
-    except SQLError:
-        if options.generate_tables:
-            cherrypy.log('generating data base tables, as requested', 'DB', 0)
-            initialize()
-            session.flush()
-            
-        else:
-            cherrypy.log("The FelloWiki data base tables seem not to be " 
-                         + "installed. Please run FelloWiki with the flag " 
-                         + "'--generate-tables' to create all needed tables.", 'DB', 2)
-            return False
-        
-    return True
-
-def config_turbogears(options):
-    if options.config_file is not None:
-        turbogears.config.update_config(configfile=options.config_file, 
-            modulename="fellowiki.config")
-    elif exists(join(dirname(__file__), "setup.py")):
-        turbogears.config.update_config(configfile=join(dirname(__file__), "dev.cfg"),
-            modulename="fellowiki.config")
-    elif exists("/etc/fellowiki.cfg"):
-        turbogears.config.update_config(configfile="/etc/fellowiki.cfg",
-            modulename="fellowiki.config")
-
-    new_conf = {}
-    
-    if options.server_host is not None:
-        new_conf['server.socket_host'] = options.server_host
-    if options.server_port is not None:
-        new_conf['server.socket_port'] = options.server_port
-    if options.db_uri is not None:   
-        new_conf['sqlalchemy.dburi'] = options.db_uri
-        
-    turbogears.config.update({'global': new_conf})
-
-
-def start_web_server():
-    options = get_configuration()
-    config_turbogears(options)
-    if check_database(options):
-        from fellowiki.controllers import FelloWikiRoot
-        turbogears.start_server(FelloWikiRoot())
-      
-if __name__ == '__main__':
-    start_web_server()

Deleted: trunk/sample-prod.cfg
===================================================================
--- trunk/sample-prod.cfg	2006-11-22 02:55:51 UTC (rev 37)
+++ trunk/sample-prod.cfg	2008-09-03 21:43:05 UTC (rev 38)
@@ -1,63 +0,0 @@
-[global]
-# This is where all of your settings go for your production environment.
-# You'll copy this file over to your production server and provide it
-# as a command-line option to your start script.
-# Settings that are the same for both development and production
-# (such as template engine, encodings, etc.) all go in 
-# fellowiki/config/app.cfg
-
-# driver://username:password at host:port/database
-# pick the form for your database
-# sqlalchemy.dburi="postgres://username at hostname/databasename"
-# sqlalchemy.dburi="mysql://username:password at hostname:port/databasename"
-# sqlalchemy.dburi="sqlite:///file_name_and_path"
-
-# If you have sqlite, here's a simple default to get you started
-# in development
-sqlalchemy.dburi="sqlite:///%(current_dir_uri)s/devdata.sqlite"
-
-
-# SERVER
-
-server.environment="production"
-
-# Sets the number of threads the server uses
-# server.thread_pool = 1
-
-# if this is part of a larger site, you can set the path
-# to the TurboGears instance here
-# server.webpath=""
-
-# session_filter.on = True
-
-# Set to True if you'd like to abort execution if a controller gets an
-# unexpected parameter. False by default
-# tg.strict_parameters = False
-
-# LOGGING
-# Logging configuration generally follows the style of the standard
-# Python logging module configuration. Note that when specifying
-# log format messages, you need to use *() for formatting variables.
-# Deployment independent log configuration is in fellowiki/config/log.cfg
-[logging]
-
-[[handlers]]
-
-[[[access_out]]]
-# set the filename as the first argument below
-args="('server.log',)"
-class='FileHandler'
-level='INFO'
-formatter='message_only'
-
-[[loggers]]
-[[[fellowiki]]]
-level='ERROR'
-qualname='fellowiki'
-handlers=['error_out']
-
-[[[access]]]
-level='INFO'
-qualname='turbogears.access'
-handlers=['access_out']
-propagate=0

Deleted: trunk/setup.cfg
===================================================================
--- trunk/setup.cfg	2006-11-22 02:55:51 UTC (rev 37)
+++ trunk/setup.cfg	2008-09-03 21:43:05 UTC (rev 38)
@@ -1,3 +0,0 @@
-[egg_info]
-tag_build = .dev
-tag_svn_revision = 1

Deleted: trunk/setup.py
===================================================================
--- trunk/setup.py	2006-11-22 02:55:51 UTC (rev 37)
+++ trunk/setup.py	2008-09-03 21:43:05 UTC (rev 38)
@@ -1,70 +0,0 @@
-# Copyright (c) 2006 Jan Niklas Fingerle
-#
-# This source code file is based on a TurboGears "quickstarted" project.
-# The TurboGears framework is copyrighted (c) 2005, 2006 by Kevin Dangoor 
-# and contributors.
-# 
-# Permission is hereby granted, free of charge, to any person obtaining a
-# copy of this software and associated documentation files (the "Software"),
-# to deal in the Software without restriction, including without limitation
-# the rights to use, copy, modify, merge, publish, distribute, sublicense,
-# and/or sell copies of the Software, and to permit persons to whom the
-# Software is furnished to do so, subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in
-# all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
-# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-# DEALINGS IN THE SOFTWARE.
-
-
-from setuptools import setup, find_packages
-from turbogears.finddata import find_package_data
-
-import os
-
-# Release information about FelloWiki
-
-setup(
-    name="FelloWiki",
-    version="0.1a1",
-    
-    description='Yet another wiki engine',
-    long_description='Yet another wiki engine - still heavily in alpha',
-    author="Jan Niklas Fingerle",
-    author_email='fingerle at users.berlios.de',
-    url='http://developer.berlios.de/projects/fellowiki/',
-    download_url='http://developer.berlios.de/project/showfiles.php?group_id=6220',
-    license='MIT-style',
-    
-    install_requires = [
-        "TurboGears >= 1.0b1",
-    ],
-    scripts = ["fellowiki.py"],
-    zip_safe=False,
-    packages=find_packages(),
-    package_data = find_package_data(where='fellowiki',
-                                     package='fellowiki'),
-    keywords = ['turbogears.app'],
-    classifiers = [
-        'Development Status :: 3 - Alpha',
-        'Operating System :: OS Independent',
-        'Programming Language :: Python',
-        'Topic :: Software Development :: Libraries :: Python Modules',
-        'Framework :: TurboGears',
-        # if this is an application that you'll distribute through
-        # the Cheeseshop, uncomment the next line
-        'Framework :: TurboGears :: Applications',
-        
-        # if this is a package that includes widgets that you'll distribute
-        # through the Cheeseshop, uncomment the next line
-        # 'Framework :: TurboGears :: Widgets',
-    ],
-    test_suite = 'nose.collector',
-    )
-    



From fingerle at mail.berlios.de  Wed Sep  3 23:49:32 2008
From: fingerle at mail.berlios.de (fingerle at BerliOS)
Date: Wed, 3 Sep 2008 23:49:32 +0200
Subject: [fellowiki-svncheckins] r39 - in trunk: . shared templates
Message-ID: <200809032149.m83LnWWo029423@sheep.berlios.de>

Author: fingerle
Date: 2008-09-03 23:49:31 +0200 (Wed, 03 Sep 2008)
New Revision: 39

Added:
   trunk/__init__.py
   trunk/actions.py
   trunk/application.py
   trunk/database.py
   trunk/shared/
   trunk/shared/style.css
   trunk/specialpages.py
   trunk/templates/
   trunk/templates/action_diff.html
   trunk/templates/action_edit.html
   trunk/templates/action_log.html
   trunk/templates/action_revert.html
   trunk/templates/action_show.html
   trunk/templates/layout.html
   trunk/templates/macros.xml
   trunk/templates/missing_action.html
   trunk/templates/page_index.html
   trunk/templates/page_missing.html
   trunk/templates/recent_changes.html
   trunk/utils.py
Log:
starting over: Basing new efforts on pocoo werkzeug sample application
"simplewiki". Checking in simplewiki code.


Added: trunk/__init__.py
===================================================================
--- trunk/__init__.py	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/__init__.py	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,17 @@
+# -*- coding: utf-8 -*-
+"""
+    simplewiki
+    ~~~~~~~~~~
+
+    Very simple wiki application based on Genshi, Werkzeug and SQLAlchemy.
+    Additionally the creoleparser is used for the wiki markup.
+
+    This example application requires Python 2.4 or higher, primarly beacause
+    the creoleparser requires Python 2.4 .  Additionally the code uses some
+    decorators or generator expressions.
+
+
+    :copyright: Copyright 2007 by Armin Ronacher.
+    :license: BSD.
+"""
+from simplewiki.application import SimpleWiki

Added: trunk/actions.py
===================================================================
--- trunk/actions.py	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/actions.py	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,186 @@
+# -*- coding: utf-8 -*-
+"""
+    simplewiki.actions
+    ~~~~~~~~~~~~~~~~~~
+
+    The per page actions.  The actions are defined in the URL with the
+    `action` parameter and directly dispatched to the functions in this
+    module.  In the module the actions are prefixed with 'on_', so be
+    careful not to name any other objects in the module with the same
+    prefix unless you want to act them as actions.
+
+    :copyright: Copyright 2007 by Armin Ronacher.
+    :license: BSD.
+"""
+from difflib import unified_diff
+from simplewiki.utils import Response, generate_template, parse_creole, \
+     href, redirect, format_datetime
+from simplewiki.database import RevisionedPage, Page, Revision, session
+
+
+def on_show(request, page_name):
+    """Displays the page the user requests."""
+    revision_id = request.args.get('rev', type=int)
+    query = RevisionedPage.query.filter_by(name=page_name)
+    if revision_id:
+        query = query.filter_by(revision_id=revision_id)
+        revision_requested = True
+    else:
+        query = query.order_by(RevisionedPage.revision_id.desc())
+        revision_requested = False
+    page = query.first()
+    if page is None:
+        return page_missing(request, page_name, revision_requested)
+    return Response(generate_template('action_show.html',
+        page=page
+    ))
+
+
+def on_edit(request, page_name):
+    """Edit the current revision of a page."""
+    change_note = error = ''
+    revision = Revision.query.filter(
+        (Page.name == page_name) &
+        (Page.page_id == Revision.page_id)
+    ).order_by(Revision.revision_id.desc()).first()
+    if revision is None:
+        page = None
+    else:
+        page = revision.page
+
+    if request.method == 'POST':
+        text = request.form.get('text')
+        if request.form.get('cancel') or \
+           revision and revision.text == text:
+            return redirect(href(page.name))
+        elif not text:
+            error = 'You cannot save empty revisions.'
+        else:
+            change_note = request.form.get('change_note', '')
+            if page is None:
+                page = Page(page_name)
+            revision = Revision(page, text, change_note)
+            session.commit()
+            return redirect(href(page.name))
+
+    return Response(generate_template('action_edit.html',
+        revision=revision,
+        page=page,
+        new=page is None,
+        page_name=page_name,
+        change_note=change_note,
+        error=error
+    ))
+
+
+def on_log(request, page_name):
+    """Show the list of recent changes."""
+    page = Page.query.filter_by(name=page_name).first()
+    if page is None:
+        return page_missing(request, page_name, False)
+    return Response(generate_template('action_log.html',
+        page=page
+    ))
+
+
+def on_diff(request, page_name):
+    """Show the diff between two revisions."""
+    old = request.args.get('old', type=int)
+    new = request.args.get('new', type=int)
+    error = ''
+    diff = page = old_rev = new_rev = None
+
+    if not (old and new):
+        error = 'No revisions specified.'
+    else:
+        revisions = dict((x.revision_id, x) for x in Revision.query.filter(
+            (Revision.revision_id.in_((old, new))) &
+            (Revision.page_id == Page.page_id) &
+            (Page.name == page_name)
+        ))
+        if len(revisions) != 2:
+            error = 'At least one of the revisions requested ' \
+                    'does not exist.'
+        else:
+            new_rev = revisions[new]
+            old_rev = revisions[old]
+            page = old_rev.page
+            diff = unified_diff(
+                (old_rev.text + '\n').splitlines(True),
+                (new_rev.text + '\n').splitlines(True),
+                page.name, page.name,
+                format_datetime(old_rev.timestamp),
+                format_datetime(new_rev.timestamp),
+                3
+            )
+
+    return Response(generate_template('action_diff.html',
+        error=error,
+        old_revision=old_rev,
+        new_revision=new_rev,
+        page=page,
+        diff=diff
+    ))
+
+
+def on_revert(request, page_name):
+    """Revert an old revision."""
+    rev_id = request.args.get('rev', type=int)
+
+    old_revision = page = None
+    error = 'No such revision'
+
+    if request.method == 'POST' and request.form.get('cancel'):
+        return redirect(href(page_name))
+
+    if rev_id:
+        old_revision = Revision.query.filter(
+            (Revision.revision_id == rev_id) &
+            (Revision.page_id == Page.page_id) &
+            (Page.name == page_name)
+        ).first()
+        if old_revision:
+            new_revision = Revision.query.filter(
+                (Revision.page_id == Page.page_id) &
+                (Page.name == page_name)
+            ).order_by(Revision.revision_id.desc()).first()
+            if old_revision == new_revision:
+                error = 'You tried to revert the current active ' \
+                        'revision.'
+            elif old_revision.text == new_revision.text:
+                error = 'There are no changes between the current ' \
+                        'revision and the revision you want to ' \
+                        'restore.'
+            else:
+                error = ''
+                page = old_revision.page
+                if request.method == 'POST':
+                    change_note = request.form.get('change_note', '')
+                    change_note = 'revert' + (change_note and ': ' +
+                                              change_note or '')
+                    revision = Revision(page, old_revision.text,
+                                        change_note)
+                    session.commit()
+                    return redirect(href(page_name))
+
+    return Response(generate_template('action_revert.html',
+        error=error,
+        old_revision=old_revision,
+        page=page
+    ))
+
+
+def page_missing(request, page_name, revision_requested, protected=False):
+    """Displayed if page or revision does not exist."""
+    return Response(generate_template('page_missing.html',
+        page_name=page_name,
+        revision_requested=revision_requested,
+        protected=protected
+    ), status=404)
+
+
+def missing_action(request, action):
+    """Displayed if a user tried to access a action that does not exist."""
+    return Response(generate_template('missing_action.html',
+        action=action
+    ), status=404)

Added: trunk/application.py
===================================================================
--- trunk/application.py	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/application.py	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,97 @@
+# -*- coding: utf-8 -*-
+"""
+    simplewiki.application
+    ~~~~~~~~~~~~~~~~~~~~~~
+
+    This module implements the wiki WSGI application which dispatches
+    requests to specific wiki pages and actions.
+
+
+    :copyright: Copyright 2007 by Armin Ronacher.
+    :license: BSD.
+"""
+from os import path
+from sqlalchemy import create_engine
+from werkzeug import ClosingIterator, SharedDataMiddleware, redirect
+from simplewiki.utils import Request, Response, local, local_manager, href
+from simplewiki.database import session, metadata
+from simplewiki import actions
+from simplewiki.specialpages import pages, page_not_found
+
+
+#: path to shared data
+SHARED_DATA = path.join(path.dirname(__file__), 'shared')
+
+
+class SimpleWiki(object):
+    """
+    Our central WSGI application.
+    """
+
+    def __init__(self, database_uri):
+        self.database_engine = create_engine(database_uri)
+
+        # apply our middlewares.   we apply the middlewars *inside* the
+        # application and not outside of it so that we never lose the
+        # reference to the `SimpleWiki` object.
+        self._dispatch = SharedDataMiddleware(self.dispatch_request, {
+            '/_shared':     SHARED_DATA
+        })
+
+        # free the context locals at the end of the request
+        self._dispatch = local_manager.make_middleware(self._dispatch)
+
+    def init_database(self):
+        """Called from the management script to generate the db."""
+        metadata.create_all(bind=self.database_engine)
+
+    def bind_to_context(self):
+        """
+        Useful for the shell.  Binds the application to the current active
+        context.  It's automatically called by the shell command.
+        """
+        local.application = self
+
+    def dispatch_request(self, environ, start_response):
+        """Dispatch an incoming request."""
+        # set up all the stuff we want to have for this request.  That is
+        # creating a request object, propagating the application to the
+        # current context and instanciating the database session.
+        self.bind_to_context()
+        request = Request(environ)
+        request.bind_to_context()
+
+        # get the current action from the url and normalize the page name
+        # which is just the request path
+        action_name = request.args.get('action') or 'show'
+        page_name = u'_'.join([x for x in request.path.strip('/')
+                               .split() if x])
+
+        # redirect to the Main_Page if the user requested the index
+        if not page_name:
+            response = redirect(href('Main_Page'))
+
+        # check special pages
+        elif page_name.startswith('Special:'):
+            if page_name[8:] not in pages:
+                response = page_not_found(request, page_name)
+            else:
+                response = pages[page_name[8:]](request)
+
+        # get the callback function for the requested action from the
+        # action module.  It's "on_" + the action name.  If it doesn't
+        # exists call the missing_action method from the same module.
+        else:
+            action = getattr(actions, 'on_' + action_name, None)
+            if action is None:
+                response = actions.missing_action(request, action_name)
+            else:
+                response = action(request, page_name)
+
+        # make sure the session is removed properly
+        return ClosingIterator(response(environ, start_response),
+                               session.remove)
+
+    def __call__(self, environ, start_response):
+        """Just forward a WSGI call to the first internal middleware."""
+        return self._dispatch(environ, start_response)

Added: trunk/database.py
===================================================================
--- trunk/database.py	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/database.py	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,127 @@
+# -*- coding: utf-8 -*-
+"""
+    simplewiki.database
+    ~~~~~~~~~~~~~~~~~~~
+
+    The database.
+
+    :copyright: Copyright 2007 by Armin Ronacher.
+    :license: BSD.
+"""
+from datetime import datetime
+from sqlalchemy import Table, Column, Integer, String, DateTime, \
+     ForeignKey, MetaData, join
+from sqlalchemy.orm import relation, create_session, scoped_session
+from simplewiki.utils import application, local_manager, parse_creole
+
+
+# create a global metadata
+metadata = MetaData()
+
+
+def new_db_session():
+    """
+    This function creates a new session if there is no session yet for
+    the current context.  It looks up the application and if it finds
+    one it creates a session bound to the active database engine in that
+    application.  If there is no application bound to the context it
+    raises an exception.
+    """
+    return create_session(application.database_engine, autoflush=True,
+                          transactional=True)
+
+
+# and create a new global session factory.  Calling this object gives
+# you the current active session
+session = scoped_session(new_db_session, local_manager.get_ident)
+
+
+# our database tables.
+page_table = Table('pages', metadata,
+    Column('page_id', Integer, primary_key=True),
+    Column('name', String(60), unique=True)
+)
+
+revision_table = Table('revisions', metadata,
+    Column('revision_id', Integer, primary_key=True),
+    Column('page_id', Integer, ForeignKey('pages.page_id')),
+    Column('timestamp', DateTime),
+    Column('text', String),
+    Column('change_note', String(200))
+)
+
+
+class Revision(object):
+    """
+    Represents one revision of a page.
+    This is useful for editing particular revision of pages or creating
+    new revisions.  It's also used for the diff system and the revision
+    log.
+    """
+
+    def __init__(self, page, text, change_note='', timestamp=None):
+        if isinstance(page, (int, long)):
+            self.page_id = page
+        else:
+            self.page = page
+        self.text = text
+        self.change_note = change_note
+        self.timestamp = timestamp or datetime.utcnow()
+
+    def render(self):
+        """Render the page text into a genshi stream."""
+        return parse_creole(self.text)
+
+    def __repr__(self):
+        return '<%s %r:%r>' % (
+            self.__class__.__name__,
+            self.page_id,
+            self.revision_id
+        )
+
+
+class Page(object):
+    """
+    Represents a simple page without any revisions.  This is for example
+    used in the page index where the page contents are not relevant.
+    """
+
+    def __init__(self, name):
+        self.name = name
+
+    @property
+    def title(self):
+        return self.name.replace('_', ' ')
+
+    def __repr__(self):
+        return '<%s %r>' % (self.__class__.__name__, self.name)
+
+
+class RevisionedPage(Page, Revision):
+    """
+    Represents a wiki page with a revision.  Thanks to multiple inhertiance
+    and the ability of SQLAlchemy to map to joins we can combine `Page` and
+    `Revision` into one class here.
+    """
+
+    def __init__(self):
+        raise TypeError('cannot create WikiPage instances, use the Page and '
+                        'Revision classes for data manipulation.')
+
+    def __repr__(self):
+        return '<%s %r:%r>' % (
+            self.__class__.__name__,
+            self.name,
+            self.revision_id
+        )
+
+
+# setup mappers
+session.mapper(Revision, revision_table)
+session.mapper(Page, page_table, properties=dict(
+    revisions=relation(Revision, backref='page',
+                       order_by=Revision.revision_id.desc())
+))
+session.mapper(RevisionedPage, join(page_table, revision_table), properties=dict(
+    page_id=[page_table.c.page_id, revision_table.c.page_id],
+))

Added: trunk/shared/style.css
===================================================================
--- trunk/shared/style.css	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/shared/style.css	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,210 @@
+body {
+    font-family: 'Luxi Sans', 'Lucida Sans', 'Trebuchet MS', sans-serif;
+    margin: 2em 1em 2em 1em;
+    padding: 0;
+    background: #1C0424;
+}
+
+a {
+    color: #6A2F7E;
+}
+
+a:hover {
+    color: #3D0F4D;
+}
+
+pre {
+    border: 1px solid #ccc;
+    background-color: white;
+    font-family: 'Consolas', 'Monaco', 'Bitstream Vera Sans', monospace;
+    font-size: 0.9em;
+    padding: 0.3em;
+}
+
+table {
+    border: 2px solid #ccc;
+    border-collapse: collapse;
+}
+
+table td, table th {
+    border: 1px solid #ccc;
+    padding: 0.4em;
+}
+
+div.bodywrapper {
+    margin: 0 auto 0 auto;
+    max-width: 50em;
+    background: #F1EBF3;
+    border: 1px solid #4C1068;
+    padding: 0;
+    color: #111;
+}
+
+div.header {
+    background-color: #320846;
+    color: white;
+}
+
+div.header h1 {
+    margin: 0;
+    padding: 0.4em;
+    font-size: 1.7em;
+}
+
+div.header h1 a {
+    text-decoration: none;
+    color: white;
+}
+
+div.header h1 a:hover {
+    color: #6A2F7E;
+}
+
+div.contents {
+    padding: 1em;
+    margin: 0;
+    border: 1px solid #3D0F4D;
+}
+
+div.footer {
+    padding: 0.5em;
+    background: #15031B;
+    color: white;
+    font-size: 0.8em;
+    text-align: right;
+    color: white;
+}
+
+div.contents h1, div.contents h2, div.contents h3, div.contents h4,
+div.contents h5 {
+    margin: 0;
+    padding: 0.3em 0 0.2em 0;
+    color: #3D0F4D;
+}
+
+div.contents h1 { font-size: 1.7em; }
+div.contents h2 { font-size: 1.6em; }
+div.contents h3 { font-size: 1.4em; }
+div.contents h4 { font-size: 1.2em; }
+div.contents h5 { font-size: 1em; }
+
+div.contents p {
+    margin: 0;
+    padding: 0.3em 0 0.3em 0;
+    line-height: 1.5em;
+}
+
+div.contents div.navigation {
+    padding: 0 0 0.3em 0;
+    margin: 0 0 0.3em 0;
+    border-bottom: 1px solid #6A2F7E;
+    font-size: 0.85em;
+    color: #555;
+}
+
+div.contents div.navigation a {
+    padding: 0 0.2em 0 0.2em;
+    font-weight: bold;
+    color: #555;
+}
+
+div.contents div.navigation a:hover {
+    color: #6A2F7E;
+}
+
+div.contents div.navigation a.active {
+    background-color: #ccc;
+    text-decoration: none;
+}
+
+div.contents div.page_meta {
+    font-size: 0.7em;
+    color: #555;
+    float: right;
+}
+
+textarea {
+    width: 99%;
+    font-family: 'Consolas', 'Monaco', 'Bitstream Vera Sans', monospace;
+    font-size: 0.9em;
+    padding: 0.3em;
+    margin: 0.5em 0 0.5em 0;
+}
+
+input {
+    font-family: 'Luxi Sans', 'Lucida Sans', 'Trebuchet MS', sans-serif;
+}
+
+table.revisions, table.changes {
+    border-collapse: collapse;
+    border: 1px solid #6A2F7E;
+    background: #fdfdfd;
+    width: 100%;
+    margin: 1em 0 0.5em 0;
+}
+
+table.revisions th, table.changes th {
+    background-color: #6A2F7E;
+    color: white;
+    padding: 0.1em 0.6em 0.1em 0.6em;
+    font-size: 0.8em;
+    border: none;
+}
+
+table.revisions td, table.changes td {
+    padding: 0.2em 0.5em 0.2em 0.5em;
+    font-size: 0.9em;
+    border: none;
+}
+
+table.revisions .timestamp, table.changes .timestamp {
+    text-align: left;
+    width: 10em;
+}
+
+table.revisions td.timestamp, table.changes td.timestamp {
+    color: #444;
+}
+
+table.revisions .change_note, table.changes .change_note {
+    text-align: left;
+}
+
+table.revisions td.change_note, table.changes td.change_note {
+    font-style: italic;
+}
+
+table.revisions th.diff input {
+    background-color: #3D0F4D;
+    color: white;
+    border: 1px solid #1C0424;
+}
+
+table.revisions .diff {
+    width: 5em;
+    text-align: right;
+}
+
+table.revisions .actions {
+    width: 8em;
+    text-align: left;
+}
+
+table.revisions td.actions {
+    font-size: 0.75em;
+}
+
+table.revisions tr.odd, table.changes tr.odd {
+    background-color: #f7f7f7;
+}
+
+pre.udiff {
+    overflow: auto;
+    font-size: 0.75em;
+}
+
+div.pagination {
+    font-size: 0.9em;
+    padding: 0.5em 0 0.5em 0;
+    text-align: center;
+}

Added: trunk/specialpages.py
===================================================================
--- trunk/specialpages.py	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/specialpages.py	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,49 @@
+# -*- coding: utf-8 -*-
+"""
+    simplewiki.specialpages
+    ~~~~~~~~~~~~~~~~~~~~~~~
+
+    This module contains special pages such as the recent changes page.
+
+
+    :copyright: Copyright 2007 by Armin Ronacher.
+    :license: BSD.
+"""
+from simplewiki.utils import Response, Pagination, generate_template, href
+from simplewiki.database import RevisionedPage, Page
+from simplewiki.actions import page_missing
+
+
+
+def page_index(request):
+    """Index of all pages."""
+    letters = {}
+    for page in Page.query.order_by(Page.name):
+        letters.setdefault(page.name.capitalize()[0], []).append(page)
+    return Response(generate_template('page_index.html',
+        letters=sorted(letters.items())
+    ))
+
+
+def recent_changes(request):
+    """Display the recent changes."""
+    page = max(1, request.args.get('page', type=int))
+    query = RevisionedPage.query \
+        .order_by(RevisionedPage.revision_id.desc())
+    return Response(generate_template('recent_changes.html',
+        pagination=Pagination(query, 20, page, 'Special:Recent_Changes')
+    ))
+
+
+def page_not_found(request, page_name):
+    """
+    Displays an error message if a user tried to access
+    a not existing special page.
+    """
+    return page_missing(request, page_name, True)
+
+
+pages = {
+    'Index':            page_index,
+    'Recent_Changes':   recent_changes
+}

Added: trunk/templates/action_diff.html
===================================================================
--- trunk/templates/action_diff.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/action_diff.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,27 @@
+<?python
+  page_action = 'log'
+?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
+      xmlns:py="http://genshi.edgewall.org/"><xi:include href="layout.html" />
+  <head>
+    <title>View Diff</title>
+  </head>
+  <body>
+    <py:if test="not error">
+    <h1>Diff for ?<a href="${href(page.name)}">${page.title}</a>?</h1>
+      <p>
+        Below you can see the differences between the revision from
+        <a href="${href(page.name, rev=old_revision.revision_id)}"
+        >${format_datetime(old_revision.timestamp)}</a> and the
+        revision from <a href="${href(page.name, rev=new_revision.revision_id)}"
+        >${format_datetime(new_revision.timestamp)}</a> in unified
+        diff format.
+      </p>
+      <pre class="udiff">${diff}</pre>
+    </py:if>
+    <py:if test="error">
+      <h1>Cannot Display Diff</h1>
+      <p class="error" py:if="error">${error}</p>
+    </py:if>
+  </body>
+</html>

Added: trunk/templates/action_edit.html
===================================================================
--- trunk/templates/action_edit.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/action_edit.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,26 @@
+<?python
+  hide_navigation = new
+  page_action = 'edit'
+?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
+      xmlns:py="http://genshi.edgewall.org/"><xi:include href="layout.html" />
+  <head>
+    <title>${new and 'Create' or 'Edit'} Page</title>
+  </head>
+  <body>
+    <h1>${new and 'Create' or 'Edit'} ?${page.title or page_name}?</h1>
+    <p>
+      You can now ${new and 'create' or 'modify'} the page contents.  To
+      format your text you can use <a href="http://www.wikicreole.org/">creole markup</a>.
+    </p>
+    <p class="error" py:if="error">${error}</p>
+    <form action="" method="post">
+      <textarea name="text" rows="15" cols="50">${revision.text}</textarea>
+      <div class="actions">
+        <input type="text" name="change_note" value="${change_note}" size="50" />
+        <input type="submit" value="Save" />
+        <input type="submit" name="cancel" value="Cancel" />
+      </div>
+    </form>
+  </body>
+</html>

Added: trunk/templates/action_log.html
===================================================================
--- trunk/templates/action_log.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/action_log.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,44 @@
+<?python
+  page_action = 'log'
+?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
+      xmlns:py="http://genshi.edgewall.org/"><xi:include href="layout.html" />
+  <head>
+    <title>Revisions for ?${page.title}?</title>
+  </head>
+  <body>
+    <h1>Revisions for ?<a href="${href(page.name)}">${page.title}</a>?</h1>
+    <p>
+      In this list you can see all the revisions of the requested page.
+    </p>
+    <form action="${href(page.name)}" method="get">
+      <input type="hidden" name="action" value="diff" />
+      <table class="revisions">
+        <tr>
+          <th class="timestamp">Date</th>
+          <th class="change_note">Change Note</th>
+          <th class="diff"><input type="submit" value="Diff" /></th>
+          <th class="actions">Actions</th>
+        </tr>
+        <tr py:for="idx, revision in enumerate(page.revisions)"
+            class="${idx % 2 == 1 and 'even' or 'odd'}">
+          <td class="timestamp">${format_datetime(revision.timestamp)}</td>
+          <td class="change_note">${revision.change_note}</td>
+          <td class="diff">
+            <input type="radio" name="old" value="${revision.revision_id}"
+                   checked="${idx == 1 and 'checked' or None}" />
+            <input type="radio" name="new" value="${revision.revision_id}"
+                   checked="${idx == 0 and 'checked' or None}" />
+          </td>
+          <td class="actions">
+            <a href="${href(page.name, rev=revision.revision_id)}">show</a>
+            <py:if test="idx">|
+              <a href="${href(page.name, rev=revision.revision_id,
+                              action='revert')}">revert</a>
+            </py:if>
+          </td>
+        </tr>
+      </table>
+    </form>
+  </body>
+</html>

Added: trunk/templates/action_revert.html
===================================================================
--- trunk/templates/action_revert.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/action_revert.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,31 @@
+<?python
+  page_action = 'log'
+?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
+      xmlns:py="http://genshi.edgewall.org/"><xi:include href="layout.html" />
+  <head>
+    <title>Revert Old Revision</title>
+  </head>
+  <body>
+    <py:if test="not error">
+    <h1>Revert Old Revision of ?<a href="${href(page.name)}">${page.title}</a>?</h1>
+      <p>
+        If you want to restore the old revision from
+        <a href="${href(page.name, rev=old_revision.revision_id)}"
+        >${format_datetime(old_revision.timestamp)}</a> enter your change
+        note and click ?Revert?.
+      </p>
+      <form action="" method="post">
+        <div class="actions">
+          <input type="text" name="change_note" value="${change_note}" size="50" />
+          <input type="submit" value="Revert" />
+          <input type="submit" name="cancel" value="Cancel" />
+        </div>
+      </form>
+    </py:if>
+    <py:if test="error">
+      <h2>Cannot Revert</h2>
+      <p class="error" py:if="error">${error}</p>
+    </py:if>
+  </body>
+</html>

Added: trunk/templates/action_show.html
===================================================================
--- trunk/templates/action_show.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/action_show.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,12 @@
+<?python
+  page_action = 'show'
+?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
+      xmlns:py="http://genshi.edgewall.org/"><xi:include href="layout.html" />
+  <head>
+    <title>${page.title}</title>
+  </head>
+  <body>
+    ${page.render()}
+  </body>
+</html>

Added: trunk/templates/layout.html
===================================================================
--- trunk/templates/layout.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/layout.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,46 @@
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:py="http://genshi.edgewall.org/"
+      xmlns:xi="http://www.w3.org/2001/XInclude" py:strip="">
+  <xi:include href="macros.xml" />
+  <py:match path="head" once="true">
+    <head py:attrs="select('@*')">
+      <title py:with="title = list(select('title/text()'))"><py:if
+        test="title">${title} ? </py:if>SimpleWiki</title>
+      <link rel="stylesheet" type="text/css" href="${href('_shared', 'style.css')}" />
+      ${select('*[local-name()!="title"]')}
+    </head>
+  </py:match>
+  <py:match path="body" once="true">
+    <body py:attrs="select('@*')">
+      <div class="bodywrapper">
+        <div class="header">
+          <h1><a href="${href()}">Simple Wiki</a></h1>
+        </div>
+        <div class="contents">
+          <div class="page_meta" py:if="not hide_navigation and page.timestamp">
+            <a href="${href(page.name, rev=page.revision_id)}">This revision</a>
+            was created on ${format_datetime(page.timestamp)}.
+          </div>
+          <div class="navigation">
+            <py:if test="not hide_navigation">
+              <py:for each="id, href, title in (
+                ('show', href(page.name), 'show'),
+                ('edit', href(page.name, action='edit'), 'edit'),
+                ('log', href(page.name, action='log'), 'log')
+              )">
+                <a href="${href}" class="${id == page_action and 'active' or
+                  None}">${title}</a> |
+              </py:for>
+            </py:if>
+            <a href="${href()}">main</a> |
+            <a href="${href('Special:Index')}">index</a> |
+            <a href="${href('Special:Recent_Changes')}">changes</a>
+          </div>
+          ${select('*|text()')}
+        </div>
+        <div class="footer">
+          Werkzeug Example Wiki Application
+        </div>
+      </div>
+    </body>
+  </py:match>
+</html>

Added: trunk/templates/macros.xml
===================================================================
--- trunk/templates/macros.xml	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/macros.xml	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,18 @@
+<div xmlns="http://www.w3.org/1999/xhtml" xmlns:py="http://genshi.edgewall.org/"
+     py:strip="">
+  
+  <py:def function="render_pagination(pagination)">
+    <div class="pagination" py:if="pagination.pages > 1">
+      <py:choose test="pagination.has_previous">
+        <a href="${pagination.previous}" py:when="True">&laquo; Previous</a>
+        <span class="inactive" py:when="False">&laquo; Previous</span>
+      </py:choose>
+      | <span class="active">${pagination.page}</span> |
+      <py:choose test="pagination.has_next">
+        <a href="${pagination.next}" py:when="True">Next &raquo;</a>
+        <span class="inactive" py:when="False">Next &raquo;</span>
+      </py:choose>
+    </div>
+  </py:def>
+
+</div>

Added: trunk/templates/missing_action.html
===================================================================
--- trunk/templates/missing_action.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/missing_action.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,12 @@
+<?python hide_navigation = True ?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
+      xmlns:py="http://genshi.edgewall.org/"><xi:include href="layout.html" />
+  <head>
+    <title>Action Not Found</title>
+  </head>
+  <body>
+    <h1>Action ?${action}? Not Found</h1>
+    <p>The requested action does not exist.</p>
+    <p>Try to <a href="?">access the same URL</a> without parameters.</p>
+  </body>
+</html>

Added: trunk/templates/page_index.html
===================================================================
--- trunk/templates/page_index.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/page_index.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,18 @@
+<?python
+  hide_navigation = True
+?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
+      xmlns:py="http://genshi.edgewall.org/"><xi:include href="layout.html" />
+  <head>
+    <title>Index</title>
+  </head>
+  <body>
+    <h1>Index</h1>
+    <py:for each="letter, pages in letters">
+      <h2 id="${letter}"><a href="#${letter}">${letter}</a></h2>
+      <ul>
+        <li py:for="page in pages"><a href="${href(page.name)}">${page.title}</a></li>
+      </ul>
+    </py:for>
+  </body>
+</html>

Added: trunk/templates/page_missing.html
===================================================================
--- trunk/templates/page_missing.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/page_missing.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,24 @@
+<?python
+  hide_navigation = True
+?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
+      xmlns:py="http://genshi.edgewall.org/"><xi:include href="layout.html" />
+  <head>
+    <title>Page Not Found</title>
+  </head>
+  <body>
+    <h1>Page Not Found</h1>
+    <p>The page you requested does not exist.</p>
+    <p py:if="revision_requested">
+      It also could be that there is no such revision of that page.
+    </p>
+    <p py:if="not protected">
+      Feel free to <a href="${href(page_name, action='edit'
+      )}">create such a page</a>.
+    </p>
+    <p py:if="protected">
+      Although this page does not exist by now you cannot create it because
+      the system protected the page name for future use.
+    </p>
+  </body>
+</html>

Added: trunk/templates/recent_changes.html
===================================================================
--- trunk/templates/recent_changes.html	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/templates/recent_changes.html	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,26 @@
+<?python
+  hide_navigation = True
+?>
+<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
+      xmlns:py="http://genshi.edgewall.org/"><xi:include href="layout.html" />
+  <head>
+    <title>Recent Changes</title>
+  </head>
+  <body>
+    <h1>Recent Changes</h1>
+    <table class="changes">
+      <tr>
+        <th class="timestamp">Date</th>
+        <th class="page">Page</th>
+        <th class="change_note">Change Note</th>
+      </tr>
+      <tr py:for="idx, entry in enumerate(pagination.entries)"
+          class="${idx % 2 == 1 and 'even' or 'odd'}">
+        <td class="timestamp">${format_datetime(entry.timestamp)}</td>
+        <td class="page"><a href="${href(entry.name)}">${entry.title}</a></td>
+        <td class="change_note">${entry.change_note}</td>
+      </tr>
+    </table>
+    ${render_pagination(pagination)}
+  </body>
+</html>

Added: trunk/utils.py
===================================================================
--- trunk/utils.py	2008-09-03 21:43:05 UTC (rev 38)
+++ trunk/utils.py	2008-09-03 21:49:31 UTC (rev 39)
@@ -0,0 +1,143 @@
+# -*- coding: utf-8 -*-
+"""
+    simplewiki.utils
+    ~~~~~~~~~~~~~~~~
+
+    This module implements various utility functions and classes used all
+    over the application.
+
+    :copyright: Copyright 2007 by Armin Ronacher.
+    :license: BSD.
+"""
+import difflib
+from os import path
+from genshi import Stream
+from genshi.template import TemplateLoader
+from creoleparser import Parser, Creole10
+from werkzeug import BaseRequest, BaseResponse, Local, LocalManager, \
+     url_encode, url_quote, redirect, cached_property
+
+
+# calculate the path to the templates an create the template loader
+TEMPLATE_PATH = path.join(path.dirname(__file__), 'templates')
+template_loader = TemplateLoader(TEMPLATE_PATH, auto_reload=True,
+                                 variable_lookup='lenient')
+
+
+# context locals.  these two objects are use by the application to
+# bind objects to the current context.  A context is defined as the
+# current thread and the current greenlet if there is greenlet support.
+local = Local()
+local_manager = LocalManager([local])
+request = local('request')
+application = local('application')
+
+# create a new creole parser
+creole_parser = Parser(dialect=Creole10(
+    wiki_links_base_url='',
+    wiki_links_path_func=lambda page_name: href(page_name),
+    wiki_links_space_char='_',
+    no_wiki_monospace=True,
+    use_additions=True
+))
+
+
+def generate_template(template_name, **context):
+    """Load and generate a template."""
+    context.update(
+        href=href,
+        format_datetime=format_datetime
+    )
+    return template_loader.load(template_name).generate(**context)
+
+
+def parse_creole(markup):
+    """Parse some creole markup and create a genshi stream."""
+    return creole_parser.generate(markup)
+
+
+def href(*args, **kw):
+    """
+    Simple function for URL generation.  Position arguments are used for the
+    URL path and keyword arguments are used for the url parameters.
+    """
+    result = [(request and request.script_root or '') + '/']
+    for idx, arg in enumerate(args):
+        result.append((idx and '/' or '') + url_quote(arg))
+    if kw:
+        result.append('?' + url_encode(kw))
+    return ''.join(result)
+
+
+def format_datetime(obj):
+    """Format a datetime object."""
+    return obj.strftime('%Y-%m-%d %H:%M')
+
+
+class Request(BaseRequest):
+    """
+    Simple request subclass that allows to bind the object to the
+    current context.
+    """
+
+    def bind_to_context(self):
+        local.request = self
+
+
+class Response(BaseResponse):
+    """
+    Encapsulates a WSGI response.  Unlike the default response object werkzeug
+    provides, this accepts a genshi stream and will automatically render it
+    to html.  This makes it possible to switch to xhtml or html5 easily.
+    """
+
+    default_mimetype = 'text/html'
+
+    def __init__(self, response=None, status=200, headers=None, mimetype=None,
+                 content_type=None):
+        if isinstance(response, Stream):
+            response = response.render('html', encoding=None, doctype='html')
+        BaseResponse.__init__(self, response, status, headers, mimetype,
+                              content_type)
+
+
+class Pagination(object):
+    """
+    Paginate a SQLAlchemy query object.
+    """
+
+    def __init__(self, query, per_page, page, link):
+        self.query = query
+        self.per_page = per_page
+        self.page = page
+        self.link = link
+        self._count = None
+
+    @cached_property
+    def entries(self):
+        return self.query.offset((self.page - 1) * self.per_page) \
+                         .limit(self.per_page).all()
+
+    @property
+    def has_previous(self):
+        return self.page > 1
+
+    @property
+    def has_next(self):
+        return self.page < self.pages
+
+    @property
+    def previous(self):
+        return href(self.link, page=self.page - 1)
+
+    @property
+    def next(self):
+        return href(self.link, page=self.page + 1)
+
+    @cached_property
+    def count(self):
+        return self.query.count()
+
+    @property
+    def pages(self):
+        return max(0, self.count - 1) // self.per_page + 1



From fingerle at mail.berlios.de  Tue Sep  9 02:49:38 2008
From: fingerle at mail.berlios.de (fingerle at BerliOS)
Date: Tue, 9 Sep 2008 02:49:38 +0200
Subject: [fellowiki-svncheckins] r40 - /
Message-ID: <200809090049.m890ncok004271@sheep.berlios.de>

Author: fingerle
Date: 2008-09-09 02:49:30 +0200 (Tue, 09 Sep 2008)
New Revision: 40

Added:
   README
Removed:
   branches/
   tags/
   trunk/
Log:
moving to mercurial


Added: README
===================================================================
--- README	2008-09-03 21:49:31 UTC (rev 39)
+++ README	2008-09-09 00:49:30 UTC (rev 40)
@@ -0,0 +1,2 @@
+svn discontinued - moved to mercurial repository at
+http://fellowiki.org/hg/



